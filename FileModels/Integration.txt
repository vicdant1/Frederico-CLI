using Abp.Domain.Repositories;
using Abp.Domain.Uow;
using HubCount.Nfes.Integration.Exporter;
using Castle.Core.Logging;
using System.Collections.Generic;
using System.Threading.Tasks;
using HubCount.Nfes.Domain.Invoice.Base;
using HubCount.Nfes.Integration.Base;
using HubCount.Nfes.Domain.Enums;
using System;
using HubCount.Nfes.Domain.Service.Interface;
using HubCount.Nfes.Domain.Entities;
using Abp.ObjectMapping;
using HubCount.Nfes.Integration.Wrappers;

namespace HubCount.Nfes.Integration.Importers
{
    /// <summary>
    /// Classe de importação de notas fiscais do sistema __SystemName__
    /// </summary>
    public class __SystemName__Integration : InvoiceIntegrationBase, I__SystemName__Integration
    {
        #region Properties

        public override ECityProvider CityProvider => ECityProvider.__SystemName__;

        private readonly __SystemName__Exporter _invoiceExporter;

        #endregion

        #region Methods
        public __SystemName__Integration(
            IInvoiceOperationLogDomainService invoiceOperationLogDomainService, 
            IRepository<Company, Guid> companyRepository,
            IRepository<Invoice, Guid> invoiceRepository, 
            IRepository<City> cityRepository,
            ILogger logger, 
            IObjectMapper mapper, 
            IUnitOfWorkManager unitOfWorkManager,
            IRepository<InvoiceItem, Guid> invoiceItemRepository, 
            IRepository<CityServiceCode> cityServiceCodeRepository,
            ICompanyEntityDomainService companyEntityDomainService, 
            IInvoiceDomainService invoiceDomainService,
            __SystemName__Exporter invoiceExporter,
            IRepository<InvoiceRequest, Guid> invoiceRequestRepository)
            : base(invoiceOperationLogDomainService, companyRepository, invoiceRepository, cityRepository, logger, mapper, unitOfWorkManager, invoiceItemRepository, cityServiceCodeRepository, companyEntityDomainService, invoiceDomainService, invoiceExporter, invoiceRequestRepository)
        {
            _invoiceExporter = invoiceExporter;
        }


        public override IEnumerable<dynamic> GetNfesEnumerable(dynamic obj)
        {
            foreach (var nfe in obj.CompNfse)
                yield return nfe;
        }


        public override async Task<byte[]> GetPdf(NFeImporterDynamicWrapper nfew, CompanyAuthorization company)
        {
            return await _invoiceExporter.GetPdfAsync(nfew, company);
        }


        public override NFeImporterDynamicWrapper GetInvoiceWrapper(dynamic nfe, EInvoiceClass nfeClass)
        {
            return new NacionalV203Wrapper(nfe, nfeClass);
        }

        #endregion
    }
}
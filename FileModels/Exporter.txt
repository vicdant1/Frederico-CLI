using Abp.Dependency;
using HubCount.Nfes.Integration.Base;
using Castle.Core.Logging;
using System;
using System.Collections.Generic;
using HubCount.Nfes.Domain.Entities;
using HubCount.Nfes.Helpers;
using HubCount.Nfes.Integration.NFe.Exporter.Base;
using System.Threading.Tasks;
using HubCount.Nfes.Domain.Invoice.Base;
using System.Net;
using System.Net.Http;
using AngleSharp.Html.Parser;
using HubCount.Nfes.Domain.Enums;
using System.Linq;
using Abp.UI;
using HubCount.Nfes.Util;
using HubCount.Nfes.Integration.Helpers;
using AngleSharp.Html.Dom;
using System.IO.Compression;
using System.IO;
using HubCount.Nfes.Configuration.Dto;

namespace HubCount.Nfes.Integration.Exporter
{
    public class __SystemName__Exporter : BaseExporter, IInvoiceExporter, ITransientDependency
    {
        private readonly string _baseUrl = "INSERIR URL BASE DO __SystemName__";
        private string _baseCityUrl = "";
        private HttpClientHandler handler;
        private HttpClient client;
        private Dictionary<string, HistoricRequests> _historicRequests = new Dictionary<string, HistoricRequests>();
        private NfeResponseDto _result = new();
        private readonly HtmlParser htmlParser = new();
        private HttpResponseMessage _currentResponse;
        private CaptchaHelper _captchaHelper;

        public static ILogger Logger { get; set; }

        private string _currentResponseString
        {
            get
            {
                return _currentResponse.Content.ReadAsStringAsync().Result;
            }
        }

        private IHtmlDocument _document
        {
            get
            {
                return htmlParser.ParseDocumentAsync(_currentResponseString).Result;
            }
        }


        public __SystemName__Exporter(CaptchaHelper captchaHelper) : base(captchaHelper)
        {
            _captchaHelper = captchaHelper;
        }


        public async Task<NfeResponseDto> ExportNFSeBatch(CompanyAuthorization companyAuthorization, NfesRequestDto request)
        {
            _result = new();

            var cityName = companyAuthorization.Company.City.Name.ToLower().Replace(" ", "").RemoveDiacritics();
            var stateAcronym = companyAuthorization.Company.City.State.Acronym.ToLower().Replace(" ", "");
            _baseCityUrl = _baseUrl.Replace("__city_name__", cityName).Replace("__uf__", stateAcronym);

            using (handler = new HttpClientHandler())
            {
                handler.UseProxy = false;
                handler.CookieContainer = new CookieContainer();
                handler.AllowAutoRedirect = true;
                handler.UseCookies = true;
                handler.MaxConnectionsPerServer = 2;

                using (client = new HttpClient(handler, true))
                {
                    await CheckAccess();
                    await Authenticate(companyAuthorization.Company);
                    await DownloadXmlNFs(request);
                    return _result;
                }
            }
        }

        private async Task CheckAccess()
        {
            try
            {
                _currentResponse = await client.GetAsync($"{_baseCityUrl}/CAMINHO_PARA_A_TELA_DE_VALIDACAO");
                await SetRequests("Primeiro Acesso");

                if (_document.QuerySelectorAll("#TAG_DE_VALIDACAO_HTML").Length == 0)
                    throw new Exception();
            }
            catch
            {
                throw new UserFriendlyException("Sistema da prefeitura instável ou fora do ar! Tente novamente mais tarde");
            }
        }

        public async Task Authenticate(Company company)
        {
            if (company.CompanyAuthorizations.Any(a => a.CompanyAuthorizationType == ECompanyAuthorizationType.Login))
                await AuthenticateWithLogin(company);
            else
                throw new Exception("Não foi encontrado nenhum tipo de login disponível!");
        }

        private async Task AuthenticateWithLogin(Company company)
        {
            try
            {
                #region exemplo_login
                /*
                var captchaUri = new Uri($"{_baseCityUrl}/images/imagem.php", UriKind.Absolute);
                _currentResponse = await client.GetAsync(captchaUri);
                var captchaByte = await _currentResponse.Content.ReadAsByteArrayAsync();
                await SetRequests("Baixando e resolvendo captcha");

                var captcha = _captchaHelper.DecodeCaptcha(captchaByte);
                var certificate = SignatureHelper.GetCertificate(company, ECompanyAuthorizationType.Login);

                var form = new List<KeyValuePair<string, string>>();
                form.Add(new KeyValuePair<string, string>("acao", "login"));
                form.Add(new KeyValuePair<string, string>("ccm", company.CityInscription));
                form.Add(new KeyValuePair<string, string>("senha", certificate.Password));
                form.Add(new KeyValuePair<string, string>("confirma", captcha.Text));
                form.Add(new KeyValuePair<string, string>("acao", "login"));
                var formContent = new FormUrlEncodedContent(form.ToArray());

                var loginUri = new Uri($"{_baseCityUrl}/contribuinte/login_exec.php", UriKind.Absolute);
                _currentResponse = await client.PostAsync(loginUri, formContent);
                await SetRequests("Login");

                if (_document.QuerySelectorAll(".dropdown-menu").Length == 0)
                {
                    if (_currentResponseString.Contains("Código de Confirmação Inválido"))
                        _captchaHelper.ReportCaptcha(captcha);

                    throw new Exception();
                }
                */
                #endregion

                // IMPLEMENTAR LOGIN
            }
            catch (UserFriendlyException e)
            {
                throw e;
            }
            catch (Exception e)
            {
                throw new UserFriendlyException("Erro ao realizar login na prefeitura! Verifique login e senha");
            }

        }

        private async Task ValidateModuleAccess(IntervalDto interval)
        {
            try
            {
                #region exemplo_validacao_acesso
                /*
                var form = new List<KeyValuePair<string, string>>();
                form.Add(new KeyValuePair<string, string>("acao", "1"));
                form.Add(new KeyValuePair<string, string>("nota", ""));
                form.Add(new KeyValuePair<string, string>("situacao", $""));
                form.Add(new KeyValuePair<string, string>("local", $""));
                form.Add(new KeyValuePair<string, string>("cnpj", $""));
                form.Add(new KeyValuePair<string, string>("mesI", $"{interval.startDate.Month}"));
                form.Add(new KeyValuePair<string, string>("anoI", $"{interval.startDate.Year}"));
                form.Add(new KeyValuePair<string, string>("mesF", $"{interval.endDate.Month}"));
                form.Add(new KeyValuePair<string, string>("anoF", $"{interval.endDate.Year}"));
                form.Add(new KeyValuePair<string, string>("acao_exportar", ""));
                form.Add(new KeyValuePair<string, string>("notaI", ""));
                form.Add(new KeyValuePair<string, string>("notaF", ""));
                var formData = new FormUrlEncodedContent(form.ToArray());

                _currentResponse = await client.PostAsync($"{_baseCityUrl}/contribuinte/nfe/nfe_historico_exportacao.php", formData);
                await SetRequests($"Acessando o Histórico de Emissão NF-e {(interval.emitidas ? "Prestadas" : "Tomadas")} de {interval.startDate.ToString("MM/yyyy")}");

                if (_document.QuerySelectorAll("#frameWin").Length == 0)
                    throw new Exception();
                */
                #endregion

                // IMPLEMENTAR VALIDACAO ACESSO
            }
            catch
            {
                throw new Exception("Não foi possível acessar o histórico de emissão NF-e.");
            }
        }

        private async Task DownloadXmlNFs(NfesRequestDto request)
        {
            try
            {
                #region exemplo_download_request
                /*
                foreach(var interval in request.Intervals)
                {
                    if (!interval.emitidas)
                        continue;

                    await ValidateModuleAccess(interval);

                    var form = new List<KeyValuePair<string, string>>();
                    form.Add(new KeyValuePair<string, string>("acao", "1"));
                    form.Add(new KeyValuePair<string, string>("mesI", $"{interval.startDate.Month}"));
                    form.Add(new KeyValuePair<string, string>("anoI", $"{interval.startDate.Year}"));
                    form.Add(new KeyValuePair<string, string>("mesF", $"{interval.endDate.Month}"));
                    form.Add(new KeyValuePair<string, string>("anoF", $"{interval.endDate.Year}"));
                    form.Add(new KeyValuePair<string, string>("todos", "on"));
                    form.Add(new KeyValuePair<string, string>("acao_exportar", "2"));
                    
                    var notas = _document.QuerySelectorAll("table tr.line input[type=checkbox]");
                    foreach (var nota in notas)
                        form.Add(new KeyValuePair<string, string>("notas[]", nota.Attributes["value"].Value));

                    var formData = new FormUrlEncodedContent(form.ToArray());
                    var downloadUrl = new Uri($"{_baseCityUrl}/contribuinte/nfe/download_zip_prest.php", UriKind.Absolute);

                    var downloadPostResponse = await client.PostAsync(downloadUrl, formData);
                    var downloadText = await downloadPostResponse.Content.ReadAsStringAsync();

                    if (downloadText.Contains("<html>"))
                        continue;

                    var downloadPostResponseBytes = await downloadPostResponse.Content.ReadAsByteArrayAsync();

                    string resultXml = UnzipNFe(downloadPostResponseBytes);

                    _result.Result.Add(interval, resultXml);
                }
                */
                #endregion

                // IMPLEMENTAR REQUEST DOWNLOAD NFs
            }
            catch(Exception ex)
            {
                throw new Exception($"Não foi possível realizar o download das Notas: {ex.Message}");
            }
        }

        private string UnzipNFe(byte[] zippedXml)
        {
            try
            {
                if (zippedXml.Length == 0) // No invoices
                    return "";

                string resultXml = "";
                var mmrStream = new MemoryStream(zippedXml);
                using (var zip = new ZipArchive(mmrStream, ZipArchiveMode.Read))
                {
                    var archive = zip.Entries;
                    foreach (var file in archive)
                    {
                        var fileExported = file.Open();
                        StreamReader fileReader = new(fileExported);
                        resultXml += fileReader.ReadToEnd();
                    }
                }
                resultXml = resultXml.Replace("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>", "");
                resultXml = $"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><notas>{resultXml}</notas>";
                return resultXml;
            }
            catch (Exception e)
            {
                throw new UserFriendlyException("Erro ao descompactar arquivo XML");
            }
        }

        private async Task SetRequests(string requestName)
        {
            try
            {
                _historicRequests.Add(requestName, new HistoricRequests()
                {
                    Response = _currentResponse,
                    ResponseString = _currentResponseString
                });
            }
            catch { }
        }

        public Task<byte[]> GetPdfAsync(NFeImporterDynamicWrapper nfew, CompanyAuthorization company)
        {
            throw new NotImplementedException();
        }

        public Task<InvoiceOperationLog> IssueInvoice(List<Invoice> invoices)
        {
            throw new NotImplementedException();
        }

        public Task<InvoiceOperationLog> CancelInvoice(Invoice invoice)
        {
            throw new NotImplementedException();
        }

    }
}